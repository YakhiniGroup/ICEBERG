"""
This Python module is used to iterate over files and generate:
1. Reads from fastq file.
2. Reads from bam (generated by bwa) file.
3. Chromosomes iceberg sites dataframe from iceberg sites dataframe for single experiment (treatment or control)
iceberg sites dataframe.
4. Chromosomes iceberg sites dataframe from iceberg sites dataframe for merged experiments
(treatment and control) iceberg sites dataframe.

(for iterate over the file)
"""

from pathlib import Path
import re
import gzip
import pysam
import pandas as pd


def get_fastq_read_lines(file: Path) -> list:
    """
    Yield one read from the given fastq file (for iterate the reads in the file).

    :param file: The fastq file path.

    :return: A list contains four lines which represent one read.
    """
    if re.search('.gz$', str(file)):
        fastq = gzip.open(str(file), 'rb')

    else:
        fastq = open(str(file), 'r')

    with fastq as f:
        while True:
            l1 = f.readline()
            if not l1:
                break

            l2 = f.readline()
            l3 = f.readline()
            l4 = f.readline()
            # yield [l1, l2, l3, l4]
            yield [l1.rstrip('\n'), l2.rstrip('\n'), l3.rstrip('\n'), l4.rstrip('\n')]


def get_bam_read(sorted_bam_file_path: Path) -> iter:
    """
    Yield one read from the given bam file (for iterate over bam file) using pysam.

    :param sorted_bam_file_path: The sorted bam file name.
    :param files_dir: The bam file directory path.
    :param out_dir: The Path to directory where the output corrupted reads file will be saved.

    :return: The read given by pysam.AlignmentFile().fetch.
    """
    bam = pysam.AlignmentFile(sorted_bam_file_path, "rb")
    for read in bam.fetch():
        yield read


def get_icebergs_by_chromosomes(t_icebergs_df: pd.DataFrame,
                                m_icebergs_df: pd.DataFrame) -> dict:
    """
    Creates dictionary where the key is the chromosome name and the value
    is also a dictionary which contains at most two keys,'t df' and 'm df', where the corresponding values are
    the icebergs from treatment and control respectively at the specific chromosome.

    :param t_icebergs_df: The icebergs dataframe of the treatment experiment.
    :param m_icebergs_df: The icebergs dataframe of the control experiment.

    :return: The created dictionary.
    """
    chromosome_names_tx = t_icebergs_df['chromosome'].unique().tolist()
    chromosome_names_control = m_icebergs_df['chromosome'].unique().tolist()
    chromosome_names = set(chromosome_names_tx + chromosome_names_control)
    chromosome_names.discard('*')

    for chromosome in chromosome_names:
        if chromosome in chromosome_names_tx and chromosome in chromosome_names_control:
            chromosome_data = {'t df': t_icebergs_df.loc[t_icebergs_df.chromosome == chromosome],
                               'm df': m_icebergs_df.loc[m_icebergs_df.chromosome == chromosome]}

        elif chromosome in chromosome_names_tx:
            chromosome_data = {'t df': t_icebergs_df.loc[t_icebergs_df.chromosome == chromosome]}

        else:
            chromosome_data = {'m df': m_icebergs_df.loc[m_icebergs_df.chromosome == chromosome]}
        chromosome_data["chromosome_name"] = chromosome
        yield chromosome_data


def get_icebergs_by_chromosomes_merged(icebergs_df: pd.DataFrame) -> dict:
    """
    Creates dictionary where the key is the chromosome name and the value
    is also a dictionary which contains at most two keys,'t df' and 'm df', where the corresponding values are
    the icebergs from treatment and control respectively at the specific chromosome.

    :param icebergs_df: The icebergs dataframe of the treatment experiment.
    :param m_icebergs_df: The icebergs dataframe of the control experiment.

    :return: The created dictionary.
    """
    names = set(icebergs_df['chromosome t'].unique().tolist() + icebergs_df['chromosome m'].unique().tolist())
    names.discard('*')
    for chromosome_name in names:
        chromosome_data = {
            'chromosome_name': chromosome_name,
            'df': icebergs_df[icebergs_df[['chromosome m', 'chromosome t']].isin([chromosome_name]).any(axis=1)]
        }
        chromosome_data['df'] = chromosome_data['df'].reset_index(drop=True)
        yield chromosome_data
